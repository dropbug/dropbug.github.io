<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">天空中的小溪-王晓熙的个人博客</title>
    <subtitle type="html">王晓熙的个人博客,全栈,Node.js,Java,GO</subtitle>
    <updated>2020-09-02T16:19:07&#43;08:00</updated>
    <id>https://xiaoxi.dev/</id>
    <link rel="alternate" type="text/html" href="https://xiaoxi.dev/" />
    <link rel="self" type="application/atom&#43;xml" href="https://xiaoxi.dev/atom.xml" />
    <author>
            <name>王晓熙</name>
            <uri>https://xiaoxi.dev/</uri>
            
                <email>wangxxzhujy@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights>
    <generator uri="https://gohugo.io/" version="0.68.3">Hugo</generator>
        <entry>
            <title type="text">使用Serverless 部署一个Egg.js应用</title>
            <link rel="alternate" type="text/html" href="https://xiaoxi.dev/posts/serverless-eggjs/" />
            <id>https://xiaoxi.dev/posts/serverless-eggjs/</id>
            <updated>2020-06-12T10:10:18&#43;08:00</updated>
            <published>2020-06-11T09:58:02&#43;08:00</published>
            <author>
                    <name>王晓熙</name>
                    <uri>https://xiaoxi.dev/</uri>
                    <email>wangxxzhujy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">背景 我刚入行的时候是2013年,做企业站.给客户部署时买一台美橙互联的VPS,上去装IIS,SqlServer,.Net Framework,配环境变量,改IIS配置参数,配置数据库账户,权限等等balabala一堆事,这还只是单机应用.OMG!要是配个运维帮我做这些事多好啊!
后来的Docker瞄准这个痛点,解决了环境不一致和重复性部署的问题.而现在的Serverless更彻底,直接隔离了IT基础设施这一环节,让开发者完全聚焦业务代码.
应用部署方式演进  物理单机-&amp;gt;虚拟化单机-&amp;gt;虚拟化分布式-&amp;gt;Docker-&amp;gt;Kubernetes-&amp;gt;Serverless
 物理单机的时代持续了很多年,后来虚拟化流行起来之后部署方式演进的速度就大大加快了.比如国内Docker刚兴起没多久,k8s又来了,k8s还没玩转,Serverless又来了~扶我起来,我还能学!
什么是Serverless 阿里云的解释:  函数计算是事件驱动的全托管计算服务。使用函数计算，您无需采购与管理服务器等基础设施，只需编写并上传代码。函数计算为您准备好计算资源，弹性地、可靠地运行任务，并提供日志查询、性能监控和报警等功能. 我的理解:  Serverless是一种无需关心代码运行环境的应用部署方式.开发者只需要提供代码,云服务商来负责部署.
 为什么要用Serverless 帮助开发者隔离与业务无关的事情,使开发者更加专注.
传统环境下开发者要关心生成环境的构建,更新,CPU/内存/磁盘/带宽的负载,日志的整理,这些与业务无关的事情分散了不少精力,特别是业务处于增长期的时候.
而Serverless帮开发者处理了所有这些琐碎的事情,且天生自带负载均衡,按需付费,很适合应对流量波峰波谷差异巨大的场景.
迁移Egg.js上Serverless 使用阿里云的Serverless服务,&amp;ldquo;函数计算&amp;rdquo; 有两种迁移方式,手动上传代码包 or 使用 funcraft自动发布.
推荐使用funcraft自动发布.
 使用npm安装funcraft  1  ~ $ npm install @alicloud/fun -g   生成发布配置文件  1  ~ $ fun deploy -y   这一步会在根目录生成一个用于部署的配置文件 template.</summary>
            
                <content type="html">&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;我刚入行的时候是2013年,做企业站.给客户部署时买一台美橙互联的VPS,上去装IIS,SqlServer,.Net Framework,配环境变量,改IIS配置参数,配置数据库账户,权限等等balabala一堆事,这还只是单机应用.OMG!要是配个运维帮我做这些事多好啊!&lt;/p&gt;
&lt;p&gt;后来的Docker瞄准这个痛点,解决了环境不一致和重复性部署的问题.而现在的Serverless更彻底,直接隔离了IT基础设施这一环节,让开发者完全聚焦业务代码.&lt;/p&gt;
&lt;h4 id=&#34;应用部署方式演进&#34;&gt;应用部署方式演进&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;物理单机-&amp;gt;虚拟化单机-&amp;gt;虚拟化分布式-&amp;gt;Docker-&amp;gt;Kubernetes-&amp;gt;Serverless&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;物理单机的时代持续了很多年,后来虚拟化流行起来之后部署方式演进的速度就大大加快了.比如国内Docker刚兴起没多久,k8s又来了,k8s还没玩转,Serverless又来了~扶我起来,我还能学!&lt;/p&gt;
&lt;h3 id=&#34;什么是serverless&#34;&gt;什么是Serverless&lt;/h3&gt;
&lt;h4 id=&#34;阿里云的解释&#34;&gt;阿里云的解释:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数计算是事件驱动的全托管计算服务。使用函数计算，您无需采购与管理服务器等基础设施，只需编写并上传代码。函数计算为您准备好计算资源，弹性地、可靠地运行任务，并提供日志查询、性能监控和报警等功能.&lt;img src=&#34;https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/5723797851/p96487.png&#34; alt=&#34;函数计算工作流程&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;我的理解&#34;&gt;我的理解:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Serverless是一种无需关心代码运行环境的应用部署方式.开发者只需要提供代码,云服务商来负责部署.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;为什么要用serverless&#34;&gt;为什么要用Serverless&lt;/h3&gt;
&lt;p&gt;帮助开发者隔离与业务无关的事情,使开发者更加专注.&lt;/p&gt;
&lt;p&gt;传统环境下开发者要关心生成环境的构建,更新,CPU/内存/磁盘/带宽的负载,日志的整理,这些与业务无关的事情分散了不少精力,特别是业务处于增长期的时候.&lt;/p&gt;
&lt;p&gt;而Serverless帮开发者处理了所有这些琐碎的事情,且天生自带负载均衡,按需付费,很适合应对流量波峰波谷差异巨大的场景.&lt;/p&gt;
&lt;h3 id=&#34;迁移eggjs上serverless&#34;&gt;迁移Egg.js上Serverless&lt;/h3&gt;
&lt;p&gt;使用阿里云的Serverless服务,&lt;a href=&#34;https://help.aliyun.com/document_detail/52895.html?spm=a2c4g.11174283.6.541.20685212ZmkJdu&#34;&gt;&amp;ldquo;函数计算&amp;rdquo;&lt;/a&gt;
有两种迁移方式,手动上传代码包 or 使用 &lt;a href=&#34;https://github.com/alibaba/funcraft/blob/master/docs/usage/getting_started-zh.md#&#34;&gt;funcraft&lt;/a&gt;自动发布.&lt;/p&gt;
&lt;p&gt;推荐使用funcraft自动发布.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用npm安装funcraft&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ npm install @alicloud/fun -g
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;生成发布配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ fun deploy -y
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这一步会在根目录生成一个用于部署的配置文件 &lt;code&gt;template.yaml&lt;/code&gt;和应用启动的shell脚本 &lt;code&gt;bootstrap&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;配置发布目标参数&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ fun config
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;按照提示，依次配置 &lt;code&gt;Account ID&lt;/code&gt;、&lt;code&gt;Access Key Id&lt;/code&gt;、&lt;code&gt;Secret Access Key&lt;/code&gt;、 &lt;code&gt;Default Region Name&lt;/code&gt;
&lt;code&gt;Account ID&lt;/code&gt;这个不是登录用户名,是阿里云分配的一串数字.&lt;a href=&#34;https://dropbug.s3-ap-northeast-1.amazonaws.com/blog/aliAcountID.png&#34;&gt;id&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;执行发布&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ fun deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;选择默认的临时域名,发布成功后阿里云会分配一个临时域名&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dropbug.s3-ap-northeast-1.amazonaws.com/blog/ServerLessTempDomain.png&#34; alt=&#34;发布成功截图&#34;&gt;&lt;/p&gt;
&lt;p&gt;访问它就可以看到效果啦&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://dropbug.s3-ap-northeast-1.amazonaws.com/blog/ServerLessQuerySkuPoolSize.jpg&#34; alt=&#34;访问函数查询结果&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/categories/web%E5%BC%80%E5%8F%91/" term="Web开发" label="Web开发" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/serverless/" term="Serverless" label="Serverless" />
                            
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/egg.js/" term="Egg.js" label="Egg.js" />
                            
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/node.js/" term="Node.js" label="Node.js" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hugo&#43;Gitpage搭建个人博客</title>
            <link rel="alternate" type="text/html" href="https://xiaoxi.dev/posts/blog-hugo-gitpage/" />
            <id>https://xiaoxi.dev/posts/blog-hugo-gitpage/</id>
            <updated>2020-06-12T10:55:43&#43;08:00</updated>
            <published>2020-06-09T14:11:35&#43;08:00</published>
            <author>
                    <name>王晓熙</name>
                    <uri>https://xiaoxi.dev/</uri>
                    <email>wangxxzhujy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">背景介绍 我们可能有各种各样的记录生活与工作的方式,这些记录散落在印象笔记,网易云笔记,手机记事本,石墨文档,CSDN,博客园等等.样式不一,问题不等(格式乱,有广告,界面不清爽,无法传播). 如果你也面临这样的问题,来试试免费的快速的个人博客吧.
Gitpage是什么 Github提供的免费静态站点空间
Hugo是什么 官方:
 Hugo is the world’s fastest static website engine.
 Hugo是一个静态站点生成工具,使用GO编写.从Markdown生成网页的速度非常快.
安装Hugo很简单,略过.
新建Hugo site 1  ~ $ hugo new site myBlog #myBlog是自定义的站点名称,你可以自己取   这一步会初始化一个空的Hugo站点,要写文章,在myBlog/content/posts下面新建一个MD文件就好了.推荐使用命令
1  ~ $ hugo new &amp;#34;posts/hello-world.md&amp;#34;    hugo new 生成的MD文档头部有draft: true的标识,当为false时才会打包进静态文件.</summary>
            
                <content type="html">&lt;h3 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h3&gt;
&lt;p&gt;我们可能有各种各样的记录生活与工作的方式,这些记录散落在印象笔记,网易云笔记,手机记事本,石墨文档,CSDN,博客园等等.样式不一,问题不等(格式乱,有广告,界面不清爽,无法传播).
如果你也面临这样的问题,来试试免费的快速的个人博客吧.&lt;/p&gt;
&lt;h3 id=&#34;gitpage是什么&#34;&gt;Gitpage是什么&lt;/h3&gt;
&lt;p&gt;Github提供的免费静态站点空间&lt;/p&gt;
&lt;h3 id=&#34;hugo是什么&#34;&gt;Hugo是什么&lt;/h3&gt;
&lt;p&gt;官方:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo is the world’s fastest static website engine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hugo是一个静态站点生成工具,使用GO编写.从Markdown生成网页的速度非常快.&lt;/p&gt;
&lt;p&gt;安装Hugo很简单,略过.&lt;/p&gt;
&lt;h3 id=&#34;新建hugo-site&#34;&gt;新建Hugo site&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ hugo new site myBlog &lt;span class=&#34;c1&#34;&gt;#myBlog是自定义的站点名称,你可以自己取&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这一步会初始化一个空的Hugo站点,要写文章,在myBlog/content/posts下面新建一个MD文件就好了.推荐使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ hugo new &lt;span class=&#34;s2&#34;&gt;&amp;#34;posts/hello-world.md&amp;#34;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;hugo new 生成的MD文档头部有draft: true的标识,当为false时才会打包进静态文件.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;为文章指定tags和categories&#34;&gt;为文章指定tags和categories&lt;/h4&gt;
&lt;p&gt;设置tags和categories可以检索和统计文章.
Hugo&lt;a href=&#34;https://gohugo.io/content-management/taxonomies/&#34;&gt;默认支持&lt;/a&gt;这两种标记.可以在根目录的config.toml(也可能是json,yaml后缀)找到Taxonomies的节
默认就叫tags,categories&lt;/p&gt;
&lt;p&gt;为了方便各个终端都可以写文章,我们把这个站点传到Github去.&lt;/p&gt;
&lt;p&gt;先初始化,然后设置远程仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ git init
~ $ git remote add origin ***.git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置gitignore
先初始化,然后设置远程仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ vi .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;写入 &lt;code&gt;public&lt;/code&gt;,这个目录是Hugo生成的静态站点文件,仅用于部署,不适合放在这个仓库里,所以忽略掉.&lt;/p&gt;
&lt;p&gt;提交更改,推送到远程仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ git add .
~ $ git commmit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;init&amp;#34;&lt;/span&gt;
~ $ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;启动站点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ hugo server -D &lt;span class=&#34;c1&#34;&gt;#浏览器中打开 localhost:1313 就可以看到效果了.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;安装一个主题&#34;&gt;安装一个主题&lt;/h4&gt;
&lt;p&gt;默认的样式比较简陋,可以安装&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;主题&lt;/a&gt;来改变站点的风格.&lt;/p&gt;
&lt;p&gt;meme是这个主题的名字,这一步从github下载了meme这个主题包到 themes/meme目录,并且将该目录设置为了Git子目录.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ git submodule add --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; https://github.com/reuixiy/hugo-theme-meme.git themes/meme
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;复制主题的示例配置文件到根目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ rm config.toml &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp themes/meme/config-examples/en/config.toml config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再打开看看效果吧&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ hugo server -D &lt;span class=&#34;c1&#34;&gt;#浏览器中打开 localhost:1313 就可以看到效果了.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;发布到gitpage&#34;&gt;发布到Gitpage&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;到Github新建一个仓库,名字叫 dropbug.github.io&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;dropbug&lt;/code&gt;是我在Github的名字,你应该替换为你的.仓库权限必须为public.&lt;/p&gt;
&lt;p&gt;Hugo生成的静态站点文件都在/public目录下,我们只需要把这些文件传到 ***.github.io这个仓库即可.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置public目录与远程仓库的关联
先清理public目录&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ rm -r public &lt;span class=&#34;c1&#34;&gt;#删除目录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置关联&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ git submodule add -f --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; https://github.com/dropbug/dropbug.github.io.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;https://github.com/dropbug/dropbug.github.io.git&lt;/code&gt;是我的静态博客站点的远程仓库地址,你应该替换为你的.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;发布博客&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ hugo -t meme &lt;span class=&#34;c1&#34;&gt;#生成静态文件,meme是主题名.&lt;/span&gt;
~ $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
~ $ git add .
~ $ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;一次新发布&amp;#34;&lt;/span&gt;
~ $ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打开 dropbug.github.io就可以看到博客啦.&lt;/p&gt;
&lt;h3 id=&#34;配置自定义域名&#34;&gt;配置自定义域名&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&#34;https://help.github.com/cn/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;官方&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;一键部署脚本&#34;&gt;一键部署脚本&lt;/h3&gt;
&lt;p&gt;在根目录新建 deploy.sh,写入以下内容.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 部署到 github pages 脚本&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 错误时终止脚本&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -e

&lt;span class=&#34;c1&#34;&gt;# Add changes to git.&lt;/span&gt;
git add .

&lt;span class=&#34;c1&#34;&gt;# Commit changes.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;building site `date`&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; 

git push

&lt;span class=&#34;c1&#34;&gt;# 打包。even 是主题&lt;/span&gt;
hugo -t meme &lt;span class=&#34;c1&#34;&gt;# if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public

&lt;span class=&#34;c1&#34;&gt;# Add changes to git.&lt;/span&gt;
git add .

&lt;span class=&#34;c1&#34;&gt;# Commit changes.&lt;/span&gt;
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; 

git push

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ../
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;发布时在根目录执行就好了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ $ . deploy.sh &lt;span class=&#34;c1&#34;&gt;#一键发布脚本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/categories/blog/" term="Blog" label="Blog" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/hugo/" term="Hugo" label="Hugo" />
                            
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/go/" term="Go" label="Go" />
                            
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/gitpage/" term="Gitpage" label="Gitpage" />
                            
                        
                            
                            
                            
                                <category scheme="https://xiaoxi.dev/tags/blog/" term="Blog" label="Blog" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text"></title>
            <link rel="alternate" type="text/html" href="https://xiaoxi.dev/posts/test/" />
            <id>https://xiaoxi.dev/posts/test/</id>
            <updated>2020-09-02T16:17:31&#43;08:00</updated>
            <published>0001-01-01T00:00:00&#43;00:00</published>
            <author>
                    <name>王晓熙</name>
                    <uri>https://xiaoxi.dev/</uri>
                    <email>wangxxzhujy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">从0设计一个CRM客服系统 项目介绍 跨境电商防关联客服系统,客服人员无需登录各个平台各个店铺,只要登录一个客服系统就可以回复所有邮件.
项目规模 日活50万,QPS峰值10万.
架构设计思考过程 业务本身并不复杂,一句话就就可以说清楚. 系统从平台拉邮件回来,展示给用户,用户回复后通过API提交给各个平台.
业务流程图 抽象业务对象 这里忽略了公司,平台这些不是很核心的对象.
 用户 店铺 邮件 回复  服务拆分  ApiProxyServer-负责与电商平台的API交互. TaskServer-负责管理定时任务,生产消息. UserServer-接收客户端的请求.  数据库设计 先看数据量 日活50万,每个用户3个店铺,每个店铺平均2封邮件,一个月新产生的邮件数据:5032*30(天)=900万.一年之后仅邮件数据本身已经到一亿量级.为避免单表数据量过大,我们对邮件表按照月份进行分表,邮件在平台上的创建时间为分区键,取年份+月份做为表名.
邮件一般都是要回复的,那回复表的数量至少与邮件表量级相等,只多不少.回复表也需要做分表.
这个项目的场景中,日活用户就是付费了的客户,至少有一台云服务器在运行,非活跃用户我们不用考虑他们的负载.所以用户表和店铺表数据量都不大,一两百万的级别,不需要分表.
MongoDB横向拓展方便,查询性能比Mysql高,自带副本集,我们选择它做存储.
性能瓶颈预估 可能发生的性能瓶颈
 拉邮件是全店铺固定时间周期或少量用户手动触发,假设150万店铺,拉取频率是5分钟拉.这个写并发有可能是比较高的.也有可能很低,因为来邮件的时间是看客户的,可能比较分散.瓶颈预估:写并发1万. 查看邮件的高峰在每天刚开始上班的时间段最高,可能集中在8:30-10:30.其他时间应该比较平缓稳定.数据访问存在明显热点区域,近24小时未回复的热点较高,最后回复时间超过一周的几乎没有访问.瓶颈预估:读并发10万 回复邮件是客服人员一个个点开写回复的,速度较慢,并发比查询的峰值要低,我们假设是5万并发,好消息是用户对回复的实时反馈要求不高,点击回复按钮后是1秒提交到平台还是60秒提交到平台,对用户来说不是很关心.瓶颈预估:写并发5万  解决方案
  TaskServer从MongoDB拉取全量店铺ID存储在本地文件(店铺数据更新不频繁,量也不大,放本地即可),定期读取文件,生成消息(Topic:PullEmail),通知各个ApiProxyServer拉取邮件. 各个ApiProxyServer从MachineShopMap拉取各自店铺ID,通过店铺拉取消息(Topic:PullEmail),通过API去各个电商平台拉邮件,接收到邮件后序列化(Json)插入到消息队列(Topic:ReadyEmail). TaskServer从消息队列(Topic:ReadyEmail)取出邮件,开N个线程(最多能开多少看DB的性能),并发插入.这里我们是5分钟一波,一波1万条.10000/3600=2.7条/s;所以这里N=3.压力不大.</summary>
            
                <content type="html">&lt;h1 id=&#34;从0设计一个crm客服系统&#34;&gt;从0设计一个CRM客服系统&lt;/h1&gt;
&lt;h4 id=&#34;项目介绍&#34;&gt;项目介绍&lt;/h4&gt;
&lt;p&gt;跨境电商防关联客服系统,客服人员无需登录各个平台各个店铺,只要登录一个客服系统就可以回复所有邮件.&lt;/p&gt;
&lt;h4 id=&#34;项目规模&#34;&gt;项目规模&lt;/h4&gt;
&lt;p&gt;日活50万,QPS峰值10万.&lt;/p&gt;
&lt;h4 id=&#34;架构设计思考过程&#34;&gt;架构设计思考过程&lt;/h4&gt;
&lt;p&gt;业务本身并不复杂,一句话就就可以说清楚.
系统从平台拉邮件回来,展示给用户,用户回复后通过API提交给各个平台.&lt;/p&gt;
&lt;h5 id=&#34;业务流程图&#34;&gt;业务流程图&lt;/h5&gt;
&lt;h5 id=&#34;抽象业务对象&#34;&gt;抽象业务对象&lt;/h5&gt;
&lt;p&gt;这里忽略了公司,平台这些不是很核心的对象.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;店铺&lt;/li&gt;
&lt;li&gt;邮件&lt;/li&gt;
&lt;li&gt;回复&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;服务拆分&#34;&gt;服务拆分&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;ApiProxyServer-负责与电商平台的API交互.&lt;/li&gt;
&lt;li&gt;TaskServer-负责管理定时任务,生产消息.&lt;/li&gt;
&lt;li&gt;UserServer-接收客户端的请求.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;数据库设计&#34;&gt;数据库设计&lt;/h6&gt;
&lt;p&gt;先看数据量
日活50万,每个用户3个店铺,每个店铺平均2封邮件,一个月新产生的邮件数据:50&lt;em&gt;3&lt;/em&gt;2*30(天)=900万.一年之后仅邮件数据本身已经到一亿量级.为避免单表数据量过大,我们对邮件表按照月份进行分表,邮件在平台上的创建时间为分区键,取年份+月份做为表名.&lt;/p&gt;
&lt;p&gt;邮件一般都是要回复的,那回复表的数量至少与邮件表量级相等,只多不少.回复表也需要做分表.&lt;/p&gt;
&lt;p&gt;这个项目的场景中,日活用户就是付费了的客户,至少有一台云服务器在运行,非活跃用户我们不用考虑他们的负载.所以用户表和店铺表数据量都不大,一两百万的级别,不需要分表.&lt;/p&gt;
&lt;p&gt;MongoDB横向拓展方便,查询性能比Mysql高,自带副本集,我们选择它做存储.&lt;/p&gt;
&lt;h6 id=&#34;性能瓶颈预估&#34;&gt;性能瓶颈预估&lt;/h6&gt;
&lt;p&gt;可能发生的性能瓶颈&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拉邮件是全店铺固定时间周期或少量用户手动触发,假设150万店铺,拉取频率是5分钟拉.这个写并发有可能是比较高的.也有可能很低,因为来邮件的时间是看客户的,可能比较分散.瓶颈预估:写并发1万.&lt;/li&gt;
&lt;li&gt;查看邮件的高峰在每天刚开始上班的时间段最高,可能集中在8:30-10:30.其他时间应该比较平缓稳定.数据访问存在明显热点区域,近24小时未回复的热点较高,最后回复时间超过一周的几乎没有访问.瓶颈预估:读并发10万&lt;/li&gt;
&lt;li&gt;回复邮件是客服人员一个个点开写回复的,速度较慢,并发比查询的峰值要低,我们假设是5万并发,好消息是用户对回复的实时反馈要求不高,点击回复按钮后是1秒提交到平台还是60秒提交到平台,对用户来说不是很关心.瓶颈预估:写并发5万&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;TaskServer从MongoDB拉取全量店铺ID存储在本地文件(店铺数据更新不频繁,量也不大,放本地即可),定期读取文件,生成消息(Topic:PullEmail),通知各个ApiProxyServer拉取邮件.
各个ApiProxyServer从MachineShopMap拉取各自店铺ID,通过店铺拉取消息(Topic:PullEmail),通过API去各个电商平台拉邮件,接收到邮件后序列化(Json)插入到消息队列(Topic:ReadyEmail).
TaskServer从消息队列(Topic:ReadyEmail)取出邮件,开N个线程(最多能开多少看DB的性能),并发插入.这里我们是5分钟一波,一波1万条.10000/3600=2.7条/s;所以这里N=3.压力不大.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未回复的邮件全放到Redis.
一封邮件有标题(100个字符),内容(600个字符),发件人(50个字符),产品ID(20个字符),创建时间(24个字符),794个字符,一天300万封邮件,峰值大约是2.2GB,邮件一旦被回复后就从Redis中剔出去,实际存储量比这个要小.
这里还应该关注响应时间,用户等待时间不应该超过1秒.所以这里我们后端部署多个UserServer承接客户端请求,中间由Nginx做轮询式负载均衡,前端纯静态架在Nginx.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各个UserServer接到请求后插入消息队列(Topic:SaveReply),TaskServer从消息队列(Topic:SaveReply)取出回复,开N个线程(最多能开多少看DB的性能),并发插入回复表.客户最多忍受&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
